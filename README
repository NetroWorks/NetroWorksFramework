Welcome and thank you for using NetroWorksFrameWork!


NetroWorksFrameWork is intended to be a helpful, simple MVC Framework helping Developers building a WebApplication 
or Website with the modern MVC concept. Integrating base functionality of User and Content Management via Database. 

This Framework is build with existing projects like "Smarty Template Engine" for use of controller and view part within MVC.
And "RedBeanPHP" providing out of the box model part within MVC.

== Requirements ==
You need at least PHP 5.3 to have all functionality of this framework. 

There are some strict limitations on usage of this framework. See below section "installation".

== Installation ==
The Framework is designed to be included as a library. For first usage just include "ContentManager.class.php" within your 
project and first landing page. For example "index.php". 

For printing this help use the function "ContentManager::printHelp()". 

Your web application or website should have following folder structure:

./project
	\_ cache - Smarty caching directory
	\_ configs - Smarty config directory. You can also use this folder for other configuration files.
	\_ controller - Location for your own controllers, having the business logic of your site
		\_ <modulename> - Allocate your controllers within "module" called folders. For better structure of your controllers. 
	\_ htdocs - The location for the landing page "index.php" which must have the initialization of ContentManager and is called every time. 
				Keep in mind to have all clientbased files available here. ./css ./fonts ./javascript and others.
				This folder is also recommended to be the document root for your webserver. To have all business logic hidden for the user.
	\_ model - Free space / directory for your own purpose to use and define a model to access data within a database.
	\_ templates - Smarty template directory. Store your html view templates here with the extension ".tpl" to be correctly allocated.
	\_ templates_c - Smarty template caching directory. No need to touch this.

== Setup ==
The first thing you should is to provide required information to the ContentManager. 
So your official landing file "index.php" should have at least following functions called:
	-	ContentManager::setProject($projectname)
	-	ContentManager::setProjectPath($pathtoyourProjectfolder)
	-	ContentManager::setupORM($dbtype, $host, $dbname, $user, $password)
	- 	ContentManager::setStaging($stagingtype)
	- 	ContentManager::setDefaultPage($module, $content, $function)
	- 	ContentManager::setDefaultContentError($module, $content, $function)
	-	ContentManager::setDefaultFunctionError($module, $content, $function)

If you don't require any Database operation or management for content. You could leave the function ::setupORM() not to call.
If you require user management which will be described below you need further these functions:

	-	ContentManager::setUserMode(true)
	-	ContentManager::setUserContents($array)
	-	ContentManager::setUserModeDefaultPage($module, $content, $function)
	
If you require in addition to the user management a guest management, you need further these functions:
	- 	ContentManager::setGuestMode(true)
	-	ContentManager::setGuestContents($array)
	-	ContentManager::setGuestModeDefaultPage($module, $content, $function)

== ContentManager Functions ==
	- ContentManager::setProject()
This function is used to give the ContentManager a name. So the framework is available to provide any kind of information
in relation to the project.

	- ContentManager::setProjectPath()
This function is required to allocate all necessary directories which are required for the framework. Especially for the controllers
and Smarty directories.

	- ContentManager::setORM()
See details below

	- ContentManager::setStaging()
This indicates the staging of this project. With this you can switch for example in different database and could get more information based on it's staging.
Within your controllers you can get this information with ContentManager::getStaging().
Three stages are available: 
	* Release
	* Test
	* Live
Feel free to test around and let behave your code different related on the staging.

	- ContentManager::setDefaultPage()
This is defining your default controller which should be loaded if your URL is requested without any specification of content.
For example:
URL-Request: http://yourpage.com

	- ContentManager::setDefaultContentError()
You have to specify a default controller and let him output custom messages. This controller will be loaded everytime a content is requested which can't be found.
The behavior is the same as every other controller. You can access request information like following:
	* ContentManager::getRequestedModule()
	* ContentManager::getRequestedContent()
	* ContentManager::getRequestedFunction()
	* ContentManager::getRequestedParams()

	- ContentManager::setDefaultFunctionError()
You have to specify a default function error controller and let it output custom messages. This controller will be loaded everytime 
a loaded controller function throws an exception. The exception will be caught and be passed to the specified function error controller. 
It is recommended to handle this exception object to specify where the exception was thrown. 

	- ContentManager::setUserMode()
If setupORM was called and the connection is established this will set the user management to active. Further details are explained below.

	- ContentManager::setUserContents()
This function is required to provide default contents which will be available and accessable through the role "member". 
If UserManagement is acquired UserManager will create default roles "admin" and "member" which indicates and associate
provided contents to this role. More explanation see below.
Each content should be provided within the array as "<modulename>_<contentname>".

	- ContentManager::setUserModeDefaultPage()
Specified controller here will be loaded if UserMode is active and the user is not logged in. So in usuall this should be the
"login" page?

	- ContentManager::setGuestMode()
Guest mode is available if you have triggered "UserMode" and if you have any contents which should also be available for guests, 
who don't have any user accounts for your webapplications.

	- ContentManager::setGuestContents()
Same behavior as for ::setUserContents(). This will let the UserManager create a role and user called "guest" and realize
ACL.
	
	- ContentManager::setGeustModeDefaultPage()
Same function as for UserModeDefaultPage. But in this case, every user located as not logged in will be redirected to the guest default page.

== ContentManagement with Database ==
Once you set the function ContentManager::setupORM(), ContentManager will create on the fly tables in your Database.
	- content
	- module
	- content_module
	
So what will the ContentManager do? 
- The ContentManager will scan all directories and files within the directory "controller". All folders will be registered
as modules and all .php files within module directories will be registered as contents. 
On every call, ContentManager will check if something has changed on the structure and keeps the information up to date.
If you don't need this just don't call the function ::setupORM(). 
In this case also no User Management and Guest Management will be available. 

Notice: Using no ORM doesn't mean that you can't use any database functions. You cann still use the "Model" implementation
to have access to any kind of Database data. It is just for indicating the buildin UserManagement and ContentManagement.


== UserManagement with Database ==
UserManager is only available if providing Database information with ::setupORM and setting the required information with above described functions.
Mainly the UserManager has following functions:

	- Indicates the user as existing user or guest
	- Looking up access rights. 
	- create initial roles and rights for "admin", "member", "guest". ("guest" only if guest mode is triggered)

Creating the initial roles and rights means that the UserManager will create additional tables within the database.

	* member - having all members stored. Used attributes: id, login, password, loginable, role
	* role - having roles stored. Used attributes: id, rolename
	* roletomodcon - link table between content_module and role. Associating the rights to access controllers.
	
So every <modulename>_<contentname> value within the array passed with the function ::setUserContents() will be associated
with the role "member". Which stands for a normal member of this application. 
And the role "admin" will be associated with every module_content to have access rights for everything. 

Afterwars when loading the requested content, the UserManager will check if the user is allowed to access the content. 

UserManager has also other functions available like 
	* createUser
	* loginUser
	* etc. 
	
Please have a look within UserManager.class.php. 

A user will be located as logged in if the $_SESSION['userid'] is available and the value is numeric. Afterwards it will check
if the given userid is available within the member table. 
For the first time locating a member it will check if admin role member is already is registered. If not it will automatically assign
the role "admin" to the first member who logs in. 

In case an user has no rights to access the requested content, the UserManager indicates the ContentManager to load the function
"viewNotAllowed()" within the Controller - Parent class. Which will output a message that the user is not allowed to view the page.

In case you want to have a custom page which should be shown, when accessing not allowed content. Just override the function 
Controller::viewNotAllowed() within your own controller and specify any view, side Controllers or output which should be loaded. 
 
== GuestManagement with Database ==
The Guestmanagement is the same treating every user, who is not logged as a "guest" member and associating the role "guest" 
with it rights to have access to the requested content. 

In case a guest tries to have access on not allowed content, the UserManager will indicate the ContentManager to load the 
default guest page. 

== Definitions ==
Within NetroWorksFrameWork you have some definitions. These are also some kind build upon the concept "configuration by convention".

=== Controllers ===
Controllers are classes extending the "Controller.class.php" within the FrameworkLibrary and holding the business logic of
your web application. 

Following example:
Your controller "LoginPage.php" should be coded as followed:

class LoginPage extends Controller {
/*** Your business logic here
***/
}

The location and accessability are defined through the "module" and "content". 
So having a controller "LoginPage.php" you should first assign this to a module. For example "core". 
Defining this you will have to allocate the "LoginPage.php" within the directory named as the module "core" within the
controller directory. 
The ContentManager.class.php will be available to access this controller having the modulename and contentname within the URI.

Following example:
URI: http://yourpage.com/index.php/core/LoginPage/index/

With this URI the ContentManager.class.php will try to allocate the module folder "core" within the controller directory and
tries  to find the file "LoginPage.php" within that folder. Afterwards it will try to call the function "index". 

So the definition here is: Your HTTP-Request should always be defined as http://yourpage.com/index.php/<modulename>/<contentname>/<functionname>/

You are able to pass additional params after the trailing slash of <functionname>. Separeted by "/".
All params passed this way will be available within the controller function call. 

Following example:
URI:  http://yourpage.com/index.php/core/LoginPage/index/param1/param2/param3/

The function "index" will be called and the additional params "param1","param2", "param3" will be passed as an array to the function index.
So if you create a funciton called "index" and want to have the additional params available you will have to declare your function as 

	- public function index($params)

As you recognized your functions within your controller, which should be available for access should always be named 
as the same for the HTTP-Request. Same for folder and controller. As this is the only way having the ContentManager to allocate
the correct Controller.

=== Views ===
Views are just simple HTML templates. All functionalites of Smarty Template Engine are available within here. So please visit 
the Smarty Documentation page here to get more details.

The only Question to be answered: How can I assign a template to a controller? 
- All controller will have the function "addView($viewname)" available. 

So once a controller function is called you can define within your function which templates should be loaded. And they will be
loaded in the order you have added them. 
So if you first add the template "header", then "navbar", then "content". The ContentManager will load the templates in this order.
Note that the order is important! 

You will also have the function "assign($key, $data)" available to assign dynamicly values to the template. The full integration of smarty template engine!

=== Additional Controllers ===
If you have some additional controllers which should be loaded, for example, a controller which provides dynamiclly navbar information like hrefs or
other stuff which will be assigned through the function. You can add within your main controller another controller function with the function
"addSideController($module, $content, $function)". 
There is no limitation and all added side controllers will be loaded from the ContentManager.


=== Models ===
This Framework is built and using the ORM RedBeanPHP. Once initialized the function ContentManager::setupORM() you are also available
to use any RedBeanPHP related functions to dynamically define your database tables and CRUD your data. 

In addition if you want to use your own Database without having the Framework building anykind of database structure on the fly 
or if you want to access any other database, you can specifiy any kind of Model class extending the "Model.class.php" of 
NetroWorksFrameWork. 

For example:
Preamble: You want to access the database "library", then for somehow it could be good to name the class "library"...
  
class library extends Model {
/*** Data access, processing logic here. 
***/
}

The parent "Model" class provides two basci functions: 

	* Model::buildConnection($dbtype, $host, $dbname, $user, $password)
	* Model::query($query, $bindings = NULL)

As this class is intended to be handled as an object, you do have also the __construct() function. 

	- Model::buildConnection()
This function will, as the name says, build the connection to the specified database. 
As the Model parent class does use the RedBeanPHP classes it will let you switch between different databases.

	- Model::query()
This functions will switch to the specified Database, performs the given query, switch back to project specific database and returns the result
as an assoc array. Having for each Dataset row an indexed array entry and named keys for the query attributes.
You are also able to use anykind of namespaces within your sql and provide and assoc array for binding values. 
The ::query() function uses the R::getAll() function from RedBeanPHP. Please look at their homepage for usage. 

Notice: As the Model class will associate a name with each connection. You should avoid to use a class name of a model
which is the same as the project name you've specified with ContentManager::setProject(). As then the query function will use
the project database instead of a possible other database with the same name.

If you want to have a model class for the entire database which is used for the ContentManagement with Database, just don't call
the function ::buildConnection(). 
It will then try to perform the query with your entire database specified with function ContentManager::setupORM().

So how should a Model function be build?

Following example:

class library extends Model {

	public function getDataX(){
		$query = "SELECT * FROM data WHERE id = 1";
		return $this->query($query);
	}

}
 	
 	
That's all! 

In addition you could of course use any kind of RedBeanPHP ORM functions within your controller, or even within your model to 
retrieve Table data as obejcts or make directly SQL commands on your entire database. 

Notice: If ContentManager::setORM() is not called, you should setup your database within your controller or model with R::setup() or R::addDatabase(). 


== Thank you ==

For reading this documentation and eventually using the framework for your next web application project! 



@author: NetroWorksSystem

  
